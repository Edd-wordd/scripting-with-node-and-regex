[
   {
      "name": "add",
      "desc": "Add two values together",
      "inputs": 2,
      "type": "basic",
      "typeNum": 100,
      "isFavorite": false,
      "order": 100
   },
   {
      "name": "subtract",
      "desc": "subtract two numbers",
      "inputs": 2,
      "type": "basic",
      "typeNum": 100,
      "isFavorite": false,
      "order": 101
   },
   {
      "name": "multiply",
      "desc": "multiply two numbers",
      "inputs": 2,
      "type": "basic",
      "typeNum": 100,
      "isFavorite": false,
      "order": 102
   },
   {
      "name": "divide",
      "desc": "divide two numbers",
      "inputs": 2,
      "type": "basic",
      "typeNum": 100,
      "isFavorite": false,
      "order": 103
   },
   {
      "name": "Increment",
      "desc": "Increment a number",
      "inputs": 1,
      "type": "basic",
      "typeNum": 100,
      "isFavorite": false,
      "order": 104
   },
   {
      "name": "Decrement",
      "desc": "Decrement a number",
      "inputs": 1,
      "type": "basic",
      "typeNum": 100,
      "isFavorite": false,
      "order": 105
   },
   {
      "name": "decimal",
      "desc": "multiply two decimal",
      "inputs": 2,
      "type": "basic",
      "typeNum": 100,
      "isFavorite": false,
      "order": 106
   },
   {
      "name": "divideDecimal",
      "desc": "divide two decimals",
      "inputs": 2,
      "type": "basic",
      "typeNum": 100,
      "isFavorite": false,
      "order": 107
   },
   {
      "name": "Concatenating",
      "desc": "Concatenating Strings with plus operator",
      "inputs": 2,
      "type": "basic",
      "typeNum": 100,
      "isFavorite": false,
      "order": 108
   },
   {
      "name": "ConcatenatingStrings",
      "desc": "Concatenating Strings with plus equals operator",
      "inputs": 2,
      "type": "basic",
      "typeNum": 100,
      "isFavorite": false,
      "order": 109
   },
   {
      "name": "ConcatenatingStringVariables",
      "desc": "Concatenating Strings with variables",
      "inputs": 2,
      "type": "basic",
      "typeNum": 100,
      "isFavorite": false,
      "order": 110
   },
   {
      "name": "stringLength",
      "desc": "Find the Length of a String",
      "inputs": 1,
      "type": "basic",
      "typeNum": 100,
      "isFavorite": false,
      "order": 111
   },
   {
      "name": "firstCharacter",
      "desc": "Use Bracket Notation to Find the First Character in a String",
      "inputs": 1,
      "type": "basic",
      "typeNum": 100,
      "isFavorite": false,
      "order": 112
   },
   {
      "name": "nthCharacter",
      "desc": "Use Bracket Notation to Find the Nth Character in a String",
      "inputs": 1,
      "type": "basic",
      "typeNum": 100,
      "isFavorite": false,
      "order": 113
   },
   {
      "name": "lastCharacter",
      "desc": "Use Bracket Notation to Find the last Character in a String",
      "inputs": 1,
      "type": "basic",
      "typeNum": 100,
      "isFavorite": false,
      "order": 114
   },
   {
      "name": "secondToLastCharacter",
      "desc": "Use Bracket Notation to Find the Nth-to-Last Character in a String",
      "inputs": 1,
      "type": "basic",
      "typeNum": 100,
      "isFavorite": false,
      "order": 115
   },
   {
      "name": "arrayWithPush",
      "desc": "Manipulate Arrays With push()",
      "inputs": 1,
      "type": "basic",
      "typeNum": 100,
      "isFavorite": false,
      "order": 116
   },
   {
      "name": "arrayWithPop",
      "desc": "Manipulate Arrays With pop()",
      "inputs": 1,
      "type": "basic",
      "typeNum": 100,
      "isFavorite": false,
      "order": 117
   },
   {
      "name": "arrayWithShift",
      "desc": "Manipulate Arrays With shift()",
      "inputs": 1,
      "type": "basic",
      "typeNum": 100,
      "isFavorite": false,
      "order": 118
   },
   {
      "name": "arrayWithUnshift",
      "desc": "Manipulate Arrays With unshift()",
      "inputs": 1,
      "type": "basic",
      "typeNum": 100,
      "isFavorite": false,
      "order": 119
   },
   {
      "name": "shoppingList",
      "desc": "Shopping List",
      "inputs": 2,
      "type": "basic",
      "typeNum": 100,
      "isFavorite": false,
      "order": 120
   },
   {
      "name": "standInLine",
      "desc": "Stand in line",
      "inputs": 2,
      "type": "basic",
      "typeNum": 100,
      "isFavorite": false,
      "order": 121
   },
   {
      "name": "cc",
      "desc": "Counting cards funnction",
      "inputs": 1,
      "type": "Intermediate",
      "typeNum": 200,
      "isFavorite": false,
      "order": 200
   },
   {
      "name": "profileLookup",
      "desc": "profile lookup",
      "inputs": 2,
      "type": "Intermediate",
      "typeNum": 200,
      "isFavorite": false,
      "order": 201
   },
   {
      "name": "randomRange",
      "desc": "Generate Random Whole Numbers within a Range",
      "inputs": 2,
      "type": "Intermediate",
      "typeNum": 200,
      "isFavorite": false,
      "order": 202
   },
   {
      "name": "removeItemSplice",
      "desc": "Remove Items Using splice()",
      "inputs": 2,
      "type": "Intermediate",
      "typeNum": 200,
      "isFavorite": false,
      "order": 203
   },
   {
      "name": "addItemSplice",
      "desc": "add Items Using splice()",
      "inputs": 3,
      "type": "Intermediate",
      "typeNum": 200,
      "isFavorite": false,
      "order": 204
   },
   {
      "name": "checkForElement",
      "desc": "check for the presence of an element with indexOf()",
      "inputs": 1,
      "type": "Intermediate",
      "typeNum": 200,
      "isFavorite": false,
      "order": 205
   },
   {
      "name": "checkType",
      "desc": "check the type of variable",
      "inputs": 1,
      "type": "Intermediate",
      "typeNum": 200,
      "isFavorite": false,
      "order": 206
   },
   {
      "name": "sliceMethod",
      "desc": "Return Part of an Array Using the slice Method",
      "inputs": 2,
      "type": "Functional",
      "typeNum": 300,
      "isFavorite": false,
      "order": 300
   },
   {
      "name": "removeWithSliceMethod",
      "desc": "Remove Elements from an Array Using slice Instead of splice",
      "inputs": 2,
      "type": "Functional",
      "typeNum": 300,
      "isFavorite": false,
      "order": 301
   },
   {
      "name": "mend",
      "desc": "Combine Two Arrays Using the concat Method",
      "inputs": 2,
      "type": "Functional",
      "typeNum": 300,
      "isFavorite": false,
      "order": 302
   },
   {
      "name": "concatInsteadOfPush",
      "desc": "Add Elements to the End of an Array Using concat Instead of push",
      "inputs": 2,
      "type": "Functional",
      "typeNum": 300,
      "isFavorite": false,
      "order": 303
   },
   {
      "name": "concatInsteadOfPush",
      "desc": "Add Elements to the End of an Array Using concat Instead of push",
      "inputs": 2,
      "type": "Functional",
      "typeNum": 300,
      "isFavorite": false,
      "order": 304
   },
   {
      "name": "reduceMethod",
      "desc": "Use the reduce Method to Analyze Data",
      "inputs": 2,
      "type": "Functional",
      "typeNum": 300,
      "isFavorite": false,
      "order": 305
   },
   {
      "name": "sorted",
      "desc": "Sort an Array Alphabetically using the sort Method",
      "inputs": 1,
      "type": "Functional",
      "typeNum": 300,
      "isFavorite": false,
      "order": 306
   },
   {
      "name": "splitStr",
      "desc": "Split a String into an Array Using the split Method",
      "inputs": 1,
      "type": "Functional",
      "typeNum": 300,
      "isFavorite": false,
      "order": 307
   },
   {
      "name": "mendArr",
      "desc": "Combine an Array into a String Using the join Method",
      "inputs": 1,
      "type": "Functional",
      "typeNum": 300,
      "isFavorite": false,
      "order": 308
   },
   {
      "name": "urlSlug",
      "desc": "Apply Functional Programming to Convert Strings to URL Slugs",
      "inputs": 1,
      "type": "Functional",
      "typeNum": 300,
      "isFavorite": false,
      "order": 309
   },
   {
      "name": "useEveryMethod",
      "desc": "Use the every Method to Check that Every Element in an Array Meets a Criteria",
      "inputs": 1,
      "type": "Functional",
      "typeNum": 300,
      "isFavorite": false,
      "order": 310
   },
   {
      "name": "useSomeMethod",
      "desc": "Use the some Method to Check that Any Elements in an Array Meet a Criteria",
      "inputs": 1,
      "type": "Functional",
      "typeNum": 300,
      "isFavorite": false,
      "order": 311
   },
   {
      "name": "convertToF",
      "desc": "convert celsius to fahrenheit",
      "inputs": 1,
      "type": "Algorithm",
      "typeNum": 400,
      "isFavorite": false,
      "order": 400
   },
   {
      "name": "factorialize",
      "desc": "Factorialize a Number",
      "inputs": 1,
      "type": "Algorithm",
      "typeNum": 400,
      "isFavorite": false,
      "order": 401
   },
   {
      "name": "findLongestWordLength",
      "desc": "Find the Longest Word in a String",
      "inputs": 1,
      "type": "Algorithm",
      "typeNum": 400,
      "isFavorite": false,
      "order": 402
   },
   {
      "name": "largestOfFour",
      "desc": "Return Largest Numbers in Arrays",
      "inputs": 1,
      "type": "Algorithm",
      "typeNum": 400,
      "isFavorite": false,
      "order": 403
   },
   {
      "name": "confirmEnding",
      "desc": "Confirm the Ending",
      "inputs": 2,
      "type": "Algorithm",
      "typeNum": 400,
      "isFavorite": false,
      "order": 404
   },
   {
      "name": "repeatStringNumTimes",
      "desc": "repeat a string",
      "inputs": 2,
      "type": "Algorithm",
      "typeNum": 400,
      "isFavorite": false,
      "order": 405
   },
   {
      "name": "truncateString",
      "desc": "Truncate a String",
      "inputs": 2,
      "type": "Algorithm",
      "typeNum": 400,
      "isFavorite": false,
      "order": 406
   },
   {
      "name": "findElement",
      "desc": "Finders Keepers",
      "inputs": 2,
      "type": "Algorithm",
      "typeNum": 400,
      "isFavorite": false,
      "order": 407
   },
   {
      "name": "titleCase",
      "desc": "Title Case a Sentence",
      "inputs": 1,
      "type": "Algorithm",
      "typeNum": 400,
      "isFavorite": false,
      "order": 408
   },
   {
      "name": "frankenSplice",
      "desc": "Slice and Splice",
      "inputs": 3,
      "type": "Algorithm",
      "typeNum": 400,
      "isFavorite": false,
      "order": 409
   },
   {
      "name": "bouncer",
      "desc": "falsy bouncer",
      "inputs": 1,
      "type": "Algorithm",
      "typeNum": 400,
      "isFavorite": false,
      "order": 410
   },
   {
      "name": "getIndexToIns",
      "desc": "Where do I Belong",
      "inputs": 2,
      "type": "Algorithm",
      "typeNum": 400,
      "isFavorite": false,
      "order": 411
   },
   {
      "name": "mutation",
      "desc": "Mutations",
      "inputs": 1,
      "type": "Algorithm",
      "typeNum": 400,
      "isFavorite": false,
      "order": 412
   },
   {
      "name": "chunkArrayInGroups",
      "desc": "Chunky Monkey",
      "inputs": 2,
      "type": "Algorithm",
      "typeNum": 400,
      "isFavorite": false,
      "order": 413
   },
   {
      "name": "replaceMe",
      "desc": "Copy, paste, then remove this column from index.html",
      "inputs": 2,
      "type": "regex",
      "typeNum": 500,
      "isFavorite": false,
      "order": 500
   },
   {
      "name": "matchStrings",
      "desc": "Match Literal Strings",
      "inputs": 2,
      "type": "regex",
      "typeNum": 500,
      "isFavorite": false,
      "order": 501
   },
   {
      "name": "multiPoss",
      "desc": "Match Single Character with Multiple Possibilities",
      "inputs": 1,
      "type": "regex",
      "typeNum": 500,
      "isFavorite": false,
      "order": 502
   },
   {
      "name": "notSpecified",
      "desc": "Match Single Characters Not Specified",
      "inputs": 1,
      "type": "regex",
      "typeNum": 500,
      "isFavorite": false,
      "order": 503
   },
   {
      "name": "multipleMatches",
      "desc": "Match Characters that Occur One or More Times",
      "inputs": 1,
      "type": "regex",
      "typeNum": 500,
      "isFavorite": false,
      "order": 504
   },
   {
      "name": "findCriminals",
      "desc": "Find One or More Criminals in a Hunt",
      "inputs": 1,
      "type": "regex",
      "typeNum": 500,
      "isFavorite": false,
      "order": 505
   },
   {
      "name": "matchTheFront",
      "desc": "Match Beginning String Patterns",
      "inputs": 1,
      "type": "regex",
      "typeNum": 500,
      "isFavorite": false,
      "order": 506
   },
   {
      "name": "matchTheEnd",
      "desc": "Match Ending String Patterns",
      "inputs": 1,
      "type": "regex",
      "typeNum": 500,
      "isFavorite": false,
      "order": 507
   },
   {
      "name": "matchEverything",
      "desc": "Match All Letters and Numbers",
      "inputs": 1,
      "type": "regex",
      "typeNum": 500,
      "isFavorite": false,
      "order": 508
   },
   {
      "name": "noLettersOrNums",
      "desc": "Match Everything But Letters and Numbers",
      "inputs": 1,
      "type": "regex",
      "typeNum": 500,
      "isFavorite": false,
      "order": 509
   },
   {
      "name": "matchNums",
      "desc": "Match all Numbers",
      "inputs": 1,
      "type": "regex",
      "typeNum": 500,
      "isFavorite": false,
      "order": 510
   },
   {
      "name": "matchNonNums",
      "desc": "Match all NON-Numbers",
      "inputs": 1,
      "type": "regex",
      "typeNum": 500,
      "isFavorite": false,
      "order": 511
   },
   {
      "name": "matchNonSpace",
      "desc": "Match Non-Whitespace Characters",
      "inputs": 1,
      "type": "regex",
      "typeNum": 500,
      "isFavorite": false,
      "order": 512
   },
   {
      "name": "lookahead",
      "desc": "Positive and Negative Lookahead",
      "inputs": 1,
      "type": "regex",
      "typeNum": 500,
      "isFavorite": false,
      "order": 513
   },
   {
      "name": "captureGroups",
      "desc": "Use Capture Groups to Search and Replace",
      "inputs": 1,
      "type": "regex",
      "typeNum": 500,
      "isFavorite": false,
      "order": 514
   },
   {
      "name": "removeWhiteSpace",
      "desc": "Remove Whitespace from Start and End",
      "inputs": 1,
      "type": "regex",
      "typeNum": 500,
      "isFavorite": false,
      "order": 515
   }
]
